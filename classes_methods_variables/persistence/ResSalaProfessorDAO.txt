public class ResSalaProfessorDAO 

	// Messages and alerts.
	private final String NULA = "Termo nulo.";
	private final String SALA_INDISPONIVEL = "A Sala esta reservada no mesmo dia e horario.";
	private final String PROFESSOR_INEXISTENTE = "Professor inexistente.";
	private final String SALA_INEXISTENTE = "Sala inexistente";
	private final String RESERVA_INEXISTENTE = "Reserva inexistente";
	private final String RESERVA_EXISTENTE = "A reserva ja existe.";
	private final String DATA_JA_PASSOU = "A data escolhida ja passou.";
	private final String HORA_JA_PASSOU = "A hora escolhida ja passou.";

	private static ResSalaProfessorDAO instance // Object that will represent the current instance to the singleton implementation.

	// Empty constructor.
	private ResSalaProfessorDAO 

	public static ResSalaProfessorDAO getInstance // Singleton implementation.

	// Reuse query for SELECT PROFESSOR BY ID clause.
	private String select_id_professor 
		Professor p // The Professor object that will be selected in the database. 
		
	// Reuse query for SELECT SALA BY ID clause.
	private String select_id_sala 
		Sala sala // The Sala object that will be selected in the database.

	// Reuse Query for WHERE clause.
	private String where_reserva_sala_professor 
		ReservaSalaProfessor r // Represents a room reservation.

	// Reuse Query for VALUES clause.
	private String values_reserva_sala_professor 
		ReservaSalaProfessor r // Represents a room reservation.

	// Reuse Query for ATRIBUTES clause.
	private String atibutes_value_reserva_sala_professor 
		ReservaSalaProfessor r // Represents a room reservation.
		
	// Reuse Query for INSERT clause.
	private String insert_into 
		ReservaSalaProfessor r // The ReservaSalaProfessor object that will be inserted in the database.

	// Reuse Query for DELETE PROFESSOR clause.
	private String delete_from_professor 
		ReservaSalaProfessor r // The ReservaSalaProfessor object that will be removed in the database by teacher.

	// Reuse Query for DELETE ALUNO clause.
	private String delete_from_aluno 
		ReservaSalaProfessor r  // The ReservaSalaProfessor object that will be removed in the database by student.

	// Reuse Query for UPDATE clause.
	private String update 
		ReservaSalaProfessor r // The ReservaSalaProfessor object that represents the entry to be updated.
		ReservaSalaProfessor r2 // The ReservaSalaProfessor object that represents the new entry, to replace the old one.

	// Include a new entry in the database.
	public void incluir 
		ReservaSalaProfessor r // The ReservaSalaProfessor ReservaEquipamento object that will be isert in the database.
		
	// Change an entry in the database.
	public void alterar 
		ReservaSalaProfessor r  // The ReservaSalaProfessor object that represents the entry to be updated.
		ReservaSalaProfessor r_new // The ReservaSalaProfessor object that represents the new entry, to replace the old one.
			
	// Remove an entry from the database.
	public void excluir 
		ReservaSalaProfessor r // The ReservaSalaProfessor object that will be removed from the database. 

	// Select all entries from the database.
	public Vector <ReservaSalaProfessor> buscarTodos 
	
	// Select entries from the database by date.
	public Vector <ReservaSalaProfessor> buscarPorData 
		String data // Represents a date.
			
	// Fetch an entry using a string.
	protected Object fetch 
		ResultSet rs // Represents the result of an insertion in stock.
		Professor p // Represents a new teacher created from rs.
		Sala s // Represents a new room created from rs.
		ReservaSalaProfessor r // Represents a new reservation created from rs teacher and room.

	// Check if there is a Professor in the database.
	private boolean professorinDB 
		Professor professor // This represents teacher is to be sought.
	// Check if there is a Sala in the database.
	private boolean salainDB 
		Sala sala // This represents room is being searched.

	// Check if there is a Sala entry in a Reserva.
	private boolean salainReservaDB 
		Sala sala // This represents room is being searched.
		String data // Represents a date.
		String hora // Represents a time.
		
	// Check if there is a Reserva in the database.
	private boolean reservainDB 
		ReservaSalaProfessor r // ReservaSalaProfessor object that will be checked from the database.

	// Check if there is an Aluno entry in a Reserva.
	private boolean alunoinReservaDB 
		String data // Represents a date.
		String hora // Represents a time.

	// Get the current date.
	private String dataAtual 
		Date date // Represents the current date.
		SimpleDateFormat formatador // Formats the date.

	// Get the current time.
	private String horaAtual 
		Date date // Represents a date.
		
	// Check if the date is passed.
	private boolean dataPassou 
		String d // Represent a date.
		String agora[] // Represents the current date. 
		String data[] // Date it came as no parameter bar.
		int dif // Difference between dates.

	// Check if the date is equals.
	public boolean dataIgual 
		String d // Represent a date.
		String agora[] // Represents the current date.
		String data[] // Date it came as no parameter bar.

	// Check if the time is passed.
	private boolean horaPassou 
		String hora // Parameter searching.
		String agora // Current time.
		
	// Standardize the date.
	private String padronizarData 
		String data // Represents a date.
		String agora[] // Represents the current date.
		String partes[] // Each part of the date.
		String dataNoPadrao // Result.
