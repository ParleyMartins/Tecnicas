class AlunoDAO

	// Constraints to the error messages that could be returned. 
	private static final String ALUNO_JA_EXISTENTE = "O Aluno ja esta cadastrado.";
	private static final String ALUNO_NULO = "O Aluno esta nulo.";
	private static final String ALUNO_NAO_EXISTENTE = "O Aluno nao esta cadastrado.";
	private static final String ALUNO_EM_USO = "Sala esta sendo utilizada em uma reserva.";
	private static final String CPF_JA_EXISTENTE = "Ja existe um aluno cadastrado com esse CPF.";
	private static final String MATRICULA_JA_EXISTENTE = "Ja existe um aluno cadastrado com essa matricula.";

	AlunoDAO instance // Object that will represent the current instance to the singleton implementation. 

	// Empty constructor.
	private AlunoDAO 

	// Singleton implementation.
	public static AlunoDAO getInstance

	// Include new Aluno in the database.
	public void include (Aluno aluno) throws SQLException, ClienteException {
		Aluno aluno // The Aluno object that will be included in the database. 

	// Update Aluno info in the database.
	public void change
		Aluno aluno_velho // The Aluno object that represents the entry to be updated.
		Aluno aluno_novo // The Aluno object that represents the new entry, to replace the old one.

	// Remove Aluno form the database.
	public void exclude
		Aluno aluno // The Aluno object that will be removed from the database. 

	// Retrive all Alunos from the database.
	public Vector <Aluno> searchAll

	// Search an Aluno by name.
	public Vector <Aluno> searchNome 
		String valor // The name that should be searched in the database. 

	// Search an Aluno by CPF.
	public Vector <Aluno> searchCpf 
		String valor // The CPF that should be searched in the database.

	// Search an Aluno by Matricula.
	public Vector <Aluno> searchMatricula 
		String valor // The student id code that should be searched in the database.

	// Search an Aluno by Email.
	public Vector <Aluno> searchEmail 
		String valor // The email that should be searched in the database.

	// Search an Aluno by phone number.
	public Vector <Aluno> searchTelefone 
		String valor // The phone number that should be searched in the database.
	

	// Search a database entry.
	private Vector <Aluno> search 
		String query // The query that will be used in the seach. 

	// Check if there is a database entry by query.
	private boolean inDBGeneric 
		String query // Query that will be used to check if there is an entry in the database. 

	// Check if there is a database entry by Aluno.
	private boolean inDB 
		Aluno aluno // The object that represents the Aluno, so we can check if it is on the database.

	// Check if there is a database entry by CPF.
	private boolean inDBCpf 
		String codigo // The CPF that identifies the Aluno, so we can check if it is on the database. 

	// Check if there is a database entry by Matricula.
	private boolean inDBMatricula 
		String codigo // The student id code that identifies the Aluno, so we can check if it is on the database.  

	// Check if there is a database entry in other tables.
	private boolean inOtherDB 
		Aluno aluno // The object that represents the Aluno, so we can check if it is on the database.  

	// Fetch Aluno using a result.
	private Aluno fetchAluno 
		ResultSet rs // Results from some database search, and will be used to create a Aluno object. 

	// Executes a statement. It is used in many other functions to modify the database. 
	private void updateQuery 
		String msg // The statement that should be sended to the database. 