public class ProfessorDAO 

	// Menssages.
	private static final String PROFESSOR_JA_EXISTENTE = "O Professor ja esta cadastrado.";
	private static final String PROFESSOR_NAO_EXISTENTE = "O Professor nao esta cadastrado.";
	private static final String PROFESSOR_NULO = "O Professor esta nulo.";
	private static final String PROFESSOR_EM_USO = "Sala esta sendo utilizada em uma reserva.";
	private static final String CPF_JA_EXISTENTE = "Ja existe um professor cadastrado com esse CPF.";
	private static final String MATRICULA_JA_EXISTENTE = "Ja existe um professor cadastrado com essa matricula.";

	
	ProfessorDAO instance // Object that will represent the current instance to the singleton implementation. 

	// Empty constructor.
	private ProfessorDAO 

	// Singleton implementation.
	public static ProfessorDAO getInstance 

	// Include new Professor in the database.
	public void incluir (Professor prof) throws SQLException, ClienteException {

		Professor prof // // The Professor object that will be included in the database.

	// Update Professor info in the database.
	public void alterar 
		Professor prof_velho // The Professor object that represents the entry to be updated.
		Professor prof_novo // The Professor object that represents the new entry, to replace the old one.
		Connection con // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.

	// Remove Professor from the database.
	public void excluir 
		Professor prof // The Professor object that will be removed from the database. 

	// Search all Professor entries from the database
	public Vector <Professor> buscarTodos 

	// Search Professor by name.
	public Vector <Professor> buscarNome 
		String valor // The name that should be searched in the database.

	// Search Professor by CPF
	public Vector <Professor> buscarCpf 
		String valor // The CPF that should be searched in the database. 

	// Search Professor by Matricula
	public Vector <Professor> buscarMatricula 
		String valor // The teacher id code that should be searched in the database.
			
			
	// Search Professor by email
	public Vector <Professor> buscarEmail 
		String valor // The email that should be searched in the database.

	// Search Professor by phone number.
	public Vector <Professor> buscarTelefone 
		String valor // The phone number that should be searched in the database.
			

	// Search Professor in the database according to the query
	private Vector <Professor> buscar 
		String query // The query that will be used in the seach.
		Vector <Professor> vet // Array of teachers, will get the search result.
		Connection con // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.
		ResultSet rs // Results from some database search, and will be used to create a Professor object. 

		
	// Check if Professor exists in the database.
	private boolean inDBGeneric	
		String query // Query that will be used to check if there is an entry in the database. 
		Connection con // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.
		ResultSet rs // Results from some database search, and will be used to create a Professor object.

	// Check if Professor exists in the database by Professor.
	private boolean inDB 
		Professor prof // The object that represents the Professor, so we can check if it is on the database.
	
	// Check if Professor exists in the database by CPF.
	private boolean inDBCpf 
		String codigo // The CPF that identifies the Professor, so we can check if it is on the database. 

	// Check if Professor exists in the database by Matricula.
	private boolean inDBMatricula 
		String codigo // The teacher id code that identifies the Professor, so we can check if it is on the database. 

	// Check if Professor exists in the database by CPF.
	private boolean inOtherDB 
		Professor prof // The object that represents the Professor, so we can check if it is on the database.

	// Fetch Professor using a result.
	private Professor fetchProfessor 
		ResultSet rs // Results from some database search, and will be used to create a Professor object.

	// Update a query.
	private void updateQuery 
		String msg // The statemant that should be sended to the database. 
		Connection con // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.