public class SalaDAO 

	// Messages and alerts.
	private static final String SALA_JA_EXISTENTE = "Sala ja cadastrada.";
	private static final String SALA_NAO_EXISTENTE = "Sala nao cadastrada.";
	private static final String SALA_EM_USO = "Sala esta sendo utilizada em uma reserva.";
	private static final String SALA_NULA = "Sala esta nula.";
	private static final String CODIGO_JA_EXISTENTE = "Sala com o mesmo codigo ja cadastrada.";

	private static SalaDAO instance // Object that will represent the current instance to the singleton implementation.

	// Blank constructor.
	private SalaDAO 

	// Singleton implementation.
	public static SalaDAO 

	// Include new Sala in the database.
	public void incluir 
		Sala sala // The Sala object that will be included in the database.		

	// Change a Sala info in the database.
	public void alterar 
		Sala old_sala // The Sala object that represents the entry to be updated. 
		Sala new_sala // The Sala object that represents the new entry, to replace the old one.
		Connection con  // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.

	// Exclude a Sala from the database.
	public void excluir 
		Sala sala // The Sala object that will be removed from the database. 

	// Select all Salas from the database.
	public Vector <Sala> buscarTodos 

	// Select a Sala in the database by code.
	public Vector <Sala> buscarPorCodigo 
		String valor // The code that should be searched in the database. 

	// Select a Sala in the database by description.
	public Vector <Sala> buscarPorDescricao 
		String valor // The description that should be searched in the database. 

	// Select a Sala in the database by capacity.
	public Vector <Sala> buscarPorCapacidade 
		String valor // The capacity that should be searched in the database. 
			

	// Search a Sala in the database by query.
	private Vector <Sala> buscar 
		String query  //The query that will be used in the seach.
		Vector <Sala> vet // Array of rooms, will get the search result.
		Connection con // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.
		ResultSet rs // Results from some database search, and will be used to create a Sala object. 

	// Check if there is an entry in the database.
	private boolean inDBGeneric 
		String query // Query that will be used to check if there is an entry in the database.
		Connection con // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.
		ResultSet rs // Results from some database search.
		
	// Check if there is a Sala in the database.
	private boolean inDB 
		Sala sala// The object that represents the Sala, so we can check if it is on the database.

	// Check if there is a Sala in the database by code.
	private boolean inDBCodigo 
		String codigo // The code that identifies the Sala, so we can check if it is on the database.

	// Check if there is a Sala entry in other databases.
	private boolean inOtherDB 
		Sala sala // The object that represents the Sala, so we can check if it is on the database.

	// Fetch a Sala using a String result.
	private Sala fetchSala 
		ResultSet rs // Results from some database search, and will be used to create a Sala object. 
		
	// Update a query.
	private void updateQuery 
		String msg // The statemant that should be sended to the database. 
		Connection con  // Will represent the current connection with the database.
		PreparedStatement pst // The statement to be executed at current connection.