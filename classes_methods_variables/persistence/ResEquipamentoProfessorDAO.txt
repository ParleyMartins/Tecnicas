public class ResEquipamentoProfessorDAO 

	// Messages and alerts.
	private final String NULA = "Termo nulo.";
	private final String EQUIPAMENTO_INDISPONIVEL = "O Equipamento esta reservada no mesmo dia e horario.";
	private final String PROFESSOR_INEXISTENTE = "Professor inexistente.";
	private final String EQUIPAMENTO_INEXISTENTE = "Equipamento inexistente";
	private final String RESERVA_INEXISTENTE = "Reserva inexistente";
	private final String RESERVA_EXISTENTE = "A reserva ja existe.";

	// Object that will represent the current instance to the singleton implementation.
	private static ResEquipamentoProfessorDAO instance;

	// Blank constructor.
	private ResEquipamentoProfessorDAO 

	// Singleton implementation.
	public static ResEquipamentoProfessorDAO 
	
	// Select Professor by id query.
	private String select_id_professor 
		Professor p // The Professor to be selected in the database

	// Select Equipamento by id query.
	private String select_id_equipamento 
		Equipamento equipamento The equipanemto to be selected in the database

	// Reuse query for WHERE clause
	private String where_reserva_equipamento_professor 
			ReservaEquipamentoProfessor r // Identification of dedicated equipment by consulting the teacher.

	// Reuse query for VALUES clause.
	private String values_reserva_equipamento_professor 
			ReservaEquipamentoProfessor r //Identification of dedicated equipment by consulting the teacher.

	// Reuse query for ATRIBUTES query.
	private String atributes_value_reserva_equipamento_professor 
			ReservaEquipamentoProfessor r // Identification of dedicated equipment by consulting the teacher.
			
			
	// Reuse query for INSERT clause.
	private String insert_into 
		ReservaEquipamentoProfessor r // The ReservaEquipamento object that will be isert in the database.

	// Reuse query for UPDATE clause.
	private String update 
		ReservaEquipamentoProfessor r // The  ReservaEquipamentoProfessor object that represents the entry to be updated.
		ReservaEquipamentoProfessor r2 // The ReservaEquipamentoProfessor object that represents the new entry, to replace the old one.

	// Reuse query for DELETE Professor clause.
	private String delete_from_professor 
		ReservaEquipamentoProfessor r // The ReservaEquipamento object that will be delete in the database by teacher.

	// Reuse query for DELETE Aluno clause.
	private String delete_from_aluno 
		ReservaEquipamentoProfessor r // The ReservaEquipamento object that will be dalere in the database by aluno.

	// Include new Reserva in the database.
	public void incluir 
		ReservaEquipamentoProfessor r // The ReservaEquipamento object that will be included in the database.
	
	// Update Reserva info in the database.
	public void alterar 
		ReservaEquipamentoProfessor r // The ReservaEquipamento object that represents the entry to be updated.
		ReservaEquipamentoProfessor r_new // The Equipamento object that represents the new entry.
			
			
	// Remove Reserva from database.
	public void excluir 
		ReservaEquipamentoProfessor r // The ReservaEquipamento object that will be removed from the database.
			

	// Select all Reservas from the database.
	public Vector <Object> buscarTodos 

	// Select Reserva by month.
	public Vector <ReservaEquipamentoProfessor> buscarPorMes 
		int mes // Variable for the month of booking.
		Vector <ReservaEquipamentoProfessor> reservas_prof_mes // Vector that takes reservations made by the teacher in the month.
		Iterator <ReservaEquipamentoProfessor> it // Traverses the vector.
		ReservaEquipamentoProfessor obj // Variable referring localized reservation.

	// Select Reserva by hour.
	public Vector <ReservaEquipamentoProfessor> buscarPorHora 
		String hora // Time of booking made.
		String hora_a // Variable gets time in the format0H:HH
		hora_b // Variable gets time in the format H:HH

	// Fetch Reserva using a result.
	protected Object fetch (ResultSet rs) 
		Professor p // Identification of the outcome of booking Professor
		Equipamento s // Identification of the outcome of booking Equipamento
		ReservaEquipamentoProfessor r // Identification of the outcome of booking ReservaQuipamento

	// Check if there is a Professor in the database.
	private boolean professorinDB 
		Professor professor // Variable referring to the Professor to be searched in the database.

	// Check if there is an Equipamento in the database.
	private boolean equipamentoinDB 
		Equipamento equipamento // Equipamento object that will be checked from the database.
			

	// Check if there is a Professor entry in a Reserva.
	private boolean professorinReservaDB 
		Professor professor // Represents a teacher 
		String data // Represents a date.
		String hora // Represents a time.
		
	// Check if there is a Equipamento entry in a Reserva.
	private boolean equipamentoinReservaDB 
		Equipamento equipamento // The object that represents the ReservaEquipamento, so we can check if it is on the database.
		String data // Represents a date.
		String hora // Represents a time.

	// Check if there is a Reserva entry in the database.
	private boolean reservainDB 
		ReservaEquipamentoProfessor r // The object that represents the ReservaEquipamento, so we can check if it is on the database.
